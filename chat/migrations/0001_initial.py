# Generated by Django 5.1 on 2024-08-31 12:18

import dirtyfields.dirtyfields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this model instance.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp indicating when the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp indicating when the instance was last updated.')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DELETED', 'Deleted'), ('DRAFT', 'Draft'), ('REMOVED', 'Removed')], default='ACTIVE', help_text='Status of the instance, typically used for soft deletion.', max_length=20)),
                ('attachment', models.FileField(blank=True, help_text='File attached to the message, can be any type of file.', null=True, upload_to='attachments/')),
                ('emoji_description', models.CharField(blank=True, help_text='Emoji or short description representing the attachment.', max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ChatRoom',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this model instance.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp indicating when the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp indicating when the instance was last updated.')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DELETED', 'Deleted'), ('DRAFT', 'Draft'), ('REMOVED', 'Removed')], default='ACTIVE', help_text='Status of the instance, typically used for soft deletion.', max_length=20)),
                ('name', models.CharField(blank=True, db_index=True, help_text='Name of the chat room. Optional for private chats, recommended for group chats.', max_length=255, null=True)),
                ('group_name', models.CharField(blank=True, db_index=True, help_text='Group name for the chat room, mainly used for identifying group chats.', max_length=255, null=True)),
                ('is_group_chat', models.BooleanField(default=False, help_text='Indicates whether the chat room is for group chat or private chat.')),
                ('admin', models.ForeignKey(help_text='User who has administrative privileges for this chat room.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='admin_of_chat_rooms', to=settings.AUTH_USER_MODEL)),
                ('members', models.ManyToManyField(blank=True, help_text='Users who are members of this chat room.', related_name='chat_rooms', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this model instance.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp indicating when the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp indicating when the instance was last updated.')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DELETED', 'Deleted'), ('DRAFT', 'Draft'), ('REMOVED', 'Removed')], default='ACTIVE', help_text='Status of the instance, typically used for soft deletion.', max_length=20)),
                ('content', models.TextField(blank=True, help_text='Text content of the message. Can be empty if only an attachment is sent.', null=True)),
                ('attachment', models.ForeignKey(blank=True, help_text='Attachment associated with the message, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.attachment')),
                ('chat_room', models.ForeignKey(help_text='Chat room in which the message was sent.', on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='chat.chatroom')),
                ('read_by', models.ManyToManyField(blank=True, help_text='Users who have read the message.', related_name='read_messages', to=settings.AUTH_USER_MODEL)),
                ('reply_to', models.ForeignKey(blank=True, help_text='The message to which this message is a reply, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='chat.message')),
                ('sender', models.ForeignKey(help_text='User who sent the message.', on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='MessageReaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for this model instance.', unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp indicating when the instance was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp indicating when the instance was last updated.')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DELETED', 'Deleted'), ('DRAFT', 'Draft'), ('REMOVED', 'Removed')], default='ACTIVE', help_text='Status of the instance, typically used for soft deletion.', max_length=20)),
                ('reaction_type', models.CharField(choices=[('NONE', 'None'), ('LIKE', 'Like'), ('DISLIKE', 'Dislike'), ('LAUGH', 'Laugh'), ('SAD', 'Sad'), ('CUTE', 'Cute'), ('LOVE', 'Love'), ('WOW', 'Wow')], default='NONE', help_text='Type of reaction given by the user.', max_length=20)),
                ('message', models.ForeignKey(help_text='Message that received the reaction.', on_delete=django.db.models.deletion.CASCADE, related_name='message_reactions', to='chat.message')),
                ('user', models.ForeignKey(help_text='User who reacted to the message.', on_delete=django.db.models.deletion.CASCADE, related_name='user_reactions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'message'), name='unique_user_message_reaction')],
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
    ]
